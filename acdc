#!/bin/bash


# Config

PREFIX='@_PREFIX_@'
USE_BIN='@_USE_BIN_@'
GIT_UPSTREAM_URL='@_GIT_UPSTREAM_URL_@'

if [ -z "$LOCAL_PREFIX" ]
then
	LOCAL_PREFIX=@_DEFAULT_LOCAL_PREFIX_@
fi

if [ -z "$DATA_DIR" ]
then
	DATA_DIR=@_DEFAULT_DATA_DIR_@
fi


# Other constants

PYTHON_VERSION=3.6.9
INSTALL_DIR="$PREFIX/share/acdc-toolkit"

export PYENV_ROOT="$HOME/.pyenv"
if ! [ -d "$PYENV_ROOT" ]
then
	PYENV_ROOT="$LOCAL_PREFIX/share/pyenv"
fi

export WORKON_HOME="$LOCAL_PREFIX/share/virtualenvs"

PATH="$PYENV_ROOT/versions/$PYTHON_VERSION/bin:$LOCAL_PREFIX/bin:$PATH:$PYENV_ROOT/bin"

export PYTHONUSERBASE="$LOCAL_PREFIX"

#

cd "$INSTALL_DIR"

function confirm()
{
	echo -n "$1 [Y/n]? "
	read ANSWER
	[[ "$ANSWER" =~ ^([Yy][eEsS]*)?$ ]]
	return $?
}

function maybe_sudo()
{
	"$@" 2> /dev/null || sudo "$@"
	return $?
}

if [ $# -eq 1 ] && [ "$1" = 'uninstall' ]
then
	rm -f "$DATA_DIR/.installed"

	# User components

	pipenv --rm

	if confirm 'Remove local data'
	then
		rm -rf "$DATA_DIR/"
	fi

	if [ "$(which pyenv 2> /dev/null)" = "$PYENV_ROOT/bin/pyenv" ] && confirm 'Uninstall pyenv'
	then
		rm -rf "$PYENV_ROOT/"
	fi

	if [ "$(which pipenv 2> /dev/null)" = "$LOCAL_PREFIX/bin/pipenv" ] && confirm 'Uninstall pipenv'
	then
	    pip3 uninstall pipenv
	fi

	# Global components

	cd /
	maybe_sudo rm -rf "$INSTALL_DIR"
	maybe_sudo rm -f "$BASH_SOURCE"
elif [ $# -eq 1 ] && [ "$1" = 'update' ]
then
	if [ -z "$GIT_UPSTREAM_URL" ]
	then
		echo "The program doesn't seem to have been installed from git." >&2
		echo "Maybe update it using your package manager." >&2
		exit 1
	fi

	# Getting new sources

	DL_DIR="$(mktemp -d 2>/dev/null || mktemp -d -t 'acdc-toolkit-dl')"
	git clone "$GIT_UPSTREAM_URL" "$DL_DIR" || exit 1
	cd "$DL_DIR"

	# Removing old installation

	NONCE=1
	while [ -e "$INSTALL_DIR.backup.$NONCE" ]
	do
		((NONCE++))
	done
	INSTALL_DIR_BACKUP="$INSTALL_DIR.backup.$NONCE"
	maybe_sudo mv "$INSTALL_DIR" "$INSTALL_DIR_BACKUP" || exit 1

	# Reinstalling

	INTERACTIVE=false \
			   PREFIX='@_PREFIX_@' \
			   USE_BIN='@_USE_BIN_@' \
			   GIT_UPSTREAM_URL='@_GIT_UPSTREAM_URL_@' \
			   DEFAULT_LOCAL_PREFIX='@_DEFAULT_LOCAL_PREFIX_@' \
			   DEFAULT_DATA_DIR='@_DEFAULT_DATA_DIR_@' \
			   ./install

	STATUS=$?
	if [ $STATUS -ne 0 ]
	then
		echo 'Failed to install new version. Restoring old one.' >&2
		maybe_sudo rm -rf "$INSTALL_DIR"
		maybe_sudo mv "$INSTALL_DIR_BACKUP" "$INSTALL_DIR"
	else
		maybe_sudo rm -rf "$INSTALL_DIR_BACKUP"
	fi

	# Cleanup

	cd ..
	rm -rf "$DL_DIR"

	# All done

	exit $STATUS
else
	REQUIRED="$(shasum Pipfile.lock | sed 's/\s.*//')"
	INSTALLED="$(cat "$DATA_DIR/.installed" 2> /dev/null)"

	if [ "$INSTALLED" != $REQUIRED ]
	then
		if ! which pipenv > /dev/null 2> /dev/null
		then
			pip3 install --user pipenv
		fi

		if ! which pyenv > /dev/null 2> /dev/null
		then
			if confirm 'Pyenv could not be found. Install it'
			then
				curl 'https://pyenv.run' | bash
			fi
		fi

		pyenv install --skip-existing $PYTHON_VERSION
		pipenv sync &&
		mkdir -p "$DATA_DIR" &&
		echo $REQUIRED > "$DATA_DIR/.installed"
		echo
		echo 'Hint: You can uninstall this program from your user directory'
		echo 'by running "'"$0"' uninstall".'
	fi

	ACDC_DATA_DIR="$DATA_DIR" pipenv run ./toolkit.py "$@"
fi

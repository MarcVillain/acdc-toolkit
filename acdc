#!/bin/bash


# Config

PREFIX='@_PREFIX_@'
GIT_UPSTREAM_URL='@_GIT_UPSTREAM_URL_@'
TARGET_WD="$(pwd)"

if [ -z "$LOCAL_PREFIX" ]
then
    LOCAL_PREFIX=@_DEFAULT_LOCAL_PREFIX_@
fi
export LOCAL_PREFIX

if [ -z "$DATA_DIR" ]
then
    DATA_DIR=@_DEFAULT_DATA_DIR_@
fi
export DATA_DIR


# Other constants

PYTHON_VERSION=3.6.9
INSTALL_DIR="$PREFIX/share/acdc-toolkit"

export PYENV_ROOT="$HOME/.pyenv"
if ! [ -d "$PYENV_ROOT" ]
then
    PYENV_ROOT="$LOCAL_PREFIX/share/pyenv"
fi

export WORKON_HOME="$LOCAL_PREFIX/share/virtualenvs"

PATH="$INSTALL_DIR/tools:$PYENV_ROOT/versions/$PYTHON_VERSION/bin:$LOCAL_PREFIX/bin:$PATH:$PYENV_ROOT/bin"

export PYTHONUSERBASE="$LOCAL_PREFIX"


# Run the command

cd "$INSTALL_DIR"

if [ $# -eq 1 ] && [ "$1" = 'uninstall' ]
then
    uninstall_toolkit
    exit $?
elif [ $# -eq 1 ] && [ "$1" = 'update' ]
then
    update_toolkit
    exit $?
else
    REQUIRED="$(shasum Pipfile.lock | cut -d' ' -f1)"
    INSTALLED="$(cat "$DATA_DIR/.installed" 2> /dev/null)"

    if [ "$INSTALLED" != $REQUIRED ]
    then
        echo "Found incomplete or broken installation."
        echo "$REQUIRED" > "$DATA_DIR/.installed"

        echo "Installing dependencies"
        if ! which pipenv > /dev/null 2> /dev/null
        then
            pip3 install --user pipenv
        fi

        if ! which pyenv > /dev/null 2> /dev/null
        then
            if confirm 'Pyenv could not be found. Install it'
            then
                curl 'https://pyenv.run' | bash
            fi
        fi

        pyenv install --skip-existing $PYTHON_VERSION
        pipenv sync &&
        mkdir -p "$DATA_DIR" &&
        echo $REQUIRED > "$DATA_DIR/.installed"
        echo ''
        echo 'Hint: You can uninstall this program from your user directory'
        echo 'by running "'"$0"' uninstall".'
        echo ''
    fi

    if ! env | grep -q '^ACDC_DEBUG='
    then
        export PYTHONOPTIMIZE=TRUE
    fi

    ACDC_DATA_DIR="$DATA_DIR" pipenv run ./toolkit.py --working-directory="$TARGET_WD" "$@"
    exit $?
fi

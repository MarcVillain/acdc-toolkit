#!/bin/bash

# Helper functions
ask_folder()
{
    local result=$1
    local name="$2"
    local name_lower=$(echo "$name" | tr '[:upper:]' '[:lower:]')
    local default="$3"

    local folder=""
    while [ -z "$folder" ]; do
        echo -n "$name folder [$default]: "
        read -r folder

        if [ -z "$folder" ]; then
            folder="$default"
        fi

        expand_home folder "$folder"
        mkdir -p "$folder" 2>/dev/null

        if [ ! -w "$folder" ]; then
            echo "The $name_lower folder must be writeable."
            folder=""
            continue
        fi
    done

    eval $result="'$folder'"
}

expand_home()
{
    local result=$1

    local var="$2"
    var="${var/#\~/$HOME}"

    eval $result="'$var'"
}

# Make all the useful scripts available
PATH="$PWD/tools:$PATH"

# Set configuration variables
if [ "$INTERACTIVE" = false ]; then
    PREFIX="${PREFIX:-~/.local}"
    DEFAULT_LOCAL_PREFIX="${DEFAULT_LOCAL_PREFIX:-~/.local}"
    DEFAULT_DATA_DIR="${DEFAULT_DATA_DIR:-~/.acdc}"

    expand_home PREFIX "$PREFIX"
    mkdir -p "$PREFIX" 2>/dev/null

    mkdir -p "$DEFAULT_LOCAL_PREFIX" 2>/dev/null

    mkdir -p "$DEFAULT_DATA_DIR" 2>/dev/null
else
    INTERACTIVE=true

    if [ "$(id -u)" -eq 0 ]; then
        echo "Warning: This script is not supposed to be run as root." >&2
        if ! confirm "Continue anyway" >&2
        then
            exit 1
        fi
    fi

    ask_folder PREFIX "Installation" "~/.local"
    DEFAULT_LOCAL_PREFIX="$PREFIX"
    ask_folder DEFAULT_DATA_DIR "Data" "~/.acdc"
fi

GIT_UPSTREAM_URL="$(git config --get remote.origin.url 2>/dev/null)"

if [ -z "$INSTALL_TYPE" ] && [ -n "$GIT_UPSTREAM_URL" ]; then
    INSTALL_TYPE="git"
fi

INSTALL_DIR="$ROOT$PREFIX/share/acdc-toolkit"
expand_home INSTALL_DIR "$INSTALL_DIR"


# Checks
if [ -d "$INSTALL_DIR" ]; then
    echo "The installation folder already exists." >&2
    echo "Please uninstall the previous version first by running 'acdc uninstall'." >&2
    exit 1
fi


# From now on, exit on error
set -e


# Installation
echo "Installing..."

if ! man sed | grep -q GNU; then
    echo "[WARN] Not a GNU-based operating system."
    echo "[INFO] Please ignore all the sed errors."
fi

BUILD_DIR="$(mktempdir)"

cp -r ./. "$BUILD_DIR"

maybe_sudo rm -rf "$INSTALL_DIR/packaging" "$INSTALL_DIR"/.git*

find "$BUILD_DIR" -type f -exec tools/substitute {} \
     "PREFIX" "$PREFIX" \
     "GIT_UPSTREAM_URL" "$GIT_UPSTREAM_URL" \
     "DEFAULT_LOCAL_PREFIX" "$DEFAULT_LOCAL_PREFIX" \
     "DEFAULT_DATA_DIR" "$DEFAULT_DATA_DIR" \
     "INSTALL_TYPE" "$INSTALL_TYPE" \;

maybe_sudo mkdir -p "$INSTALL_DIR"
maybe_sudo cp -r "$BUILD_DIR/." "$INSTALL_DIR"

maybe_sudo mkdir -p "$ROOT$PREFIX/bin/"
maybe_sudo mv "$INSTALL_DIR/acdc" "$ROOT$PREFIX/bin/"

if $INTERACTIVE && ! grep -q "$ROOT$PREFIX/bin" <<< "$PATH" ; then
    echo "The command has been installed in '$ROOT$PREFIX/bin'."
    echo 'Please consider adding this to your $PATH.'
fi

# Cleanup
rm -rf "$BUILD_DIR"

#!/bin/sh

# Responsibilities of This Script
# ===============================
#
#     This script is responsible for installing the read-only part
# of the toolkit (see the "Install Locations" section below). All other
# components are managed by the toolkit wrapper script.
#
# This separations is required for an efficient packaging strategy as
# explained below. Packages are built by running this install script
# in a fake root and archiving the result.
#
#
# Install Locations
# =================
#
#
# Read-Only Components
# --------------------
#
# * PREFIX/share/acdc-toolkit/
# * PREFIX/bin/acdc
#
#     Separating read-only from writeable data enables a system-wide
# installation. This allows the toolkit to be installed, updated and removed
# by a package manager.
#
#
# Writeable Components
# --------------------
#
# * LOCAL_PREFIX/...
# * ~/.pyenv/ (if not in LOCAL_PREFIX/)
#
#     In this location will be installed most pythonic components, such as the
# toolkit's pyenv and virtualenv. It is important to understand that these
# components are not managed by the "install" script, but by the shell wrapper
# of the toolkit.
#
# The actual value of LOCAL_PREFIX normally is typically the same as
# DEFAULT_LOCAL_PREFIX (see the "Configuration" section below), but can be
# overriden by exporting the corresponding environment variable.
#
#
# User data
# ---------
#
# * DATA_DIR/...
#
#     This is the directory were the toolkit itself writes its data.
# The user might have to edit files in this directory, e.g. the logins.txt file.
#
# Similarly to LOCAL_PREFIX, DATA_DIR defaults to DEFAULT_DATA_DIR, but can
# be explicitly passed to the toolkit wrapper script through the environment.
#
#
# Configuration
# =============
#
#     Some parameters are configured during the first installation.
# For each of the following parameters, the string @_PARAM_NAME_@ is replaced
# in every source file by the parameter's value. This is an easy way to propagate
# configuration to other scripts, and to the toolkit itself.
#
#
# PREFIX
# ------
#
#     Typically set to /usr, see the "Install Locations" section for more details
# about the role of this value.
#
#
# DEFAULT_LOCAL_PEFIX
# -------------------
#
#     Typically set to ~/.local. See the "Install Locations" section. The reason
# this parameter exists is because LOCAL_PREFIX really is a concern of the
# wrapper script, but it is also convenient to give it a sensible default value
# so that most users won't have to add a variable to their shell configuration
# file.
#
#
# DEFAULT_DATA_DIR
# ----------------
#
#     Typically set to ~/.acdc. See the "Install Locations" section and the
# DEFAULT_LOCAL_PREFIX parameter.
#
#
# INSTALL_TYPE
# ------------
#
#     One of "*-package" or "git". This is used by the wrapper script for
# updating or uninstalling the package.
#
#
# GIT_UPSTREAM_URL
# ----------------
#
#     If INSTALL_TYPE is set to "git", this parameter indicates the git URL from
# which the toolkit has been downloaded. This is used by the wrapper script for
# performing updates.


# Helper functions
ask_folder()
{
    result=$1
    name="$2"
    name_lower=$(echo "$name" | tr '[:upper:]' '[:lower:]')
    default="$3"

    folder=""
    while [ -z "$folder" ]; do
        printf '%s folder [%s]: ' "$name" "$default"
        read -r folder

        if [ -z "$folder" ]; then
            folder="$default"
        fi

        folder="$(eval echo $folder)"
        mkdir -p "$folder" 2>/dev/null

        if [ ! -w "$folder" ]; then
            echo "The $name_lower folder must be writeable."
            folder=""
            continue
        fi
    done

    eval $result="'$folder'"
}


# Make all the useful scripts available
PATH="$PWD/tools:$PATH"

# Set configuration variables
if [ "$INTERACTIVE" = false ]; then
    if [ -z "$PREFIX" ]; then
        PREFIX=~/.local
    fi

    DEFAULT_LOCAL_PREFIX="${DEFAULT_LOCAL_PREFIX:-~/.local}"
    DEFAULT_DATA_DIR="${DEFAULT_DATA_DIR:-~/.acdc}"

    mkdir -p "$PREFIX" 2>/dev/null
else
    INTERACTIVE=true

    if [ "$(id -u)" -eq 0 ]; then
        echo "Warning: This script is not supposed to be run as root." >&2
        if ! confirm "Continue anyway" >&2
        then
            exit 1
        fi
    fi

    ask_folder PREFIX "Installation" "~/.local"
    DEFAULT_LOCAL_PREFIX="$PREFIX"
    ask_folder DEFAULT_DATA_DIR "Data" "~/.acdc"
fi

GIT_UPSTREAM_URL="$(git config --get remote.origin.url 2>/dev/null)"

if [ -z "$INSTALL_TYPE" ] && [ -n "$GIT_UPSTREAM_URL" ]; then
    INSTALL_TYPE="git"
fi

INSTALL_DIR="$ROOT$PREFIX/share/acdc-toolkit"


# Checks
if [ -d "$INSTALL_DIR" ]; then
    echo "The installation folder already exists." >&2
    echo "Please uninstall the previous version first by running 'acdc uninstall'." >&2
    exit 1
fi


# From now on, exit on error
set -e


# Installation
echo "Installing..."

if ! man sed | grep -q GNU; then
    echo "[WARN] Not a GNU-based operating system."
    echo "[INFO] Please ignore all the sed errors."
fi

BUILD_DIR="$(mktempdir)"

cp -r ./* "$BUILD_DIR"

find "$BUILD_DIR" -type f -exec tools/substitute {} \
     "PREFIX" "$PREFIX" \
     "GIT_UPSTREAM_URL" "$GIT_UPSTREAM_URL" \
     "DEFAULT_LOCAL_PREFIX" "$DEFAULT_LOCAL_PREFIX" \
     "DEFAULT_DATA_DIR" "$DEFAULT_DATA_DIR" \
     "INSTALL_TYPE" "$INSTALL_TYPE" \;

sudo=''
if ! mkdir "$ROOT$PREFIX" 2> /dev/null && ! touch "$ROOT$PREFIX" 2> /dev/null
then
    sudo='sudo'
fi

$sudo mkdir -p "$INSTALL_DIR"
$sudo cp -r "$BUILD_DIR/." "$INSTALL_DIR"

$sudo mkdir -p "$ROOT$PREFIX/bin/"
$sudo mv "$INSTALL_DIR/acdc" "$ROOT$PREFIX/bin/"

if $INTERACTIVE && ! echo "$PATH" | grep -q "$ROOT$PREFIX/bin"; then
    echo "The command has been installed in '$ROOT$PREFIX/bin'."
    echo 'Please consider adding this to your $PATH.'
fi

# Cleanup
rm -rf "$BUILD_DIR"
